# scripts/plot_final_data.py

import pandas as pd
import matplotlib.pyplot as plt
import sys
import os


def plot_model_timeseries():
    """
    Loads the final, combined timeseries data and generates plots for each
    major variable (wind, solar, consumption, hydro, and grid price) to
    allow for visual inspection.
    """
    # --- Configuration ---

    # The final data file generated by combine_inputs.py
    csv_file_path = 'model_timeseries.csv'

    # Optional: Set a date range to focus on a specific period.
    # Format: "YYYY-MM-DD". Use None to plot the entire year.
    start_date = "2019-01-01"
    end_date = "2019-12-31"

    print("--- Plotting Final Model Timeseries ---")

    # --- Load Data ---
    if not os.path.exists(csv_file_path):
        print(f"ERROR: The data file was not found at '{csv_file_path}'.", file=sys.stderr)
        print("Please run 'combine_inputs.py' first to generate it.", file=sys.stderr)
        sys.exit(1)

    # Load the data, using the 'timestamp' column as the datetime index
    df = pd.read_csv(csv_file_path, index_col='timestamp', parse_dates=True)
    print(f"Successfully loaded data from '{csv_file_path}'.")

    # --- Filter by Date Range ---
    if start_date:
        df = df.loc[start_date:]
    if end_date:
        df = df.loc[:end_date]

    if df.empty:
        print("ERROR: The dataframe is empty after filtering by the specified date range.", file=sys.stderr)
        print("Please check your START_DATE and END_DATE values.", file=sys.stderr)
        sys.exit(1)

    print(f"Plotting data from {df.index.min()} to {df.index.max()}.")

    # --- Create Plots ---

    # Create a figure with 5 vertically stacked subplots.
    # `sharex=True` links the x-axis for all plots, improving readability.
    fig, axes = plt.subplots(5, 1, figsize=(11, 6), sharex=True)
    fig.suptitle('Verification of Combined Model Data', fontsize=16)

    # Plot 1: Wind Capacity Factor
    axes[0].plot(df.index, df['wind_capacity_factor'], color='royalblue', linewidth=1)
    axes[0].set_title('Wind Capacity Factor')
    axes[0].set_ylabel('Factor')
    axes[0].grid(True, linestyle='--', alpha=0.6)

    # Plot 2: Solar Capacity Factor
    axes[1].plot(df.index, df['solar_capacity_factor'], color='darkorange', linewidth=1)
    axes[1].set_title('Solar Capacity Factor')
    axes[1].set_ylabel('Factor')
    axes[1].grid(True, linestyle='--', alpha=0.6)

    # Plot 3: Consumption
    axes[2].plot(df.index, df['consumption_kwh'], color='firebrick', linewidth=1)
    axes[2].set_title('Energy Consumption')
    axes[2].set_ylabel('Consumption (kWh)')
    axes[2].grid(True, linestyle='--', alpha=0.6)

    # Plot 4: Hydro Energy
    axes[3].plot(df.index, df['hydro_power_inflow_kwh'], color='seagreen', linewidth=1)
    axes[3].set_title('Available Hydro Energy')
    axes[3].set_ylabel('Hydro power inflow (kwh)')  # Corrected unit
    axes[3].grid(True, linestyle='--', alpha=0.6)

    # Plot 5: Grid Price
    axes[4].plot(df.index, df['grid_price_eur_per_mwh'], color='purple', linewidth=1)
    axes[4].set_title('Grid Price')
    axes[4].set_ylabel('Price (â‚¬/MWh)')
    axes[4].set_xlabel('Date')  # X-axis label only needed on the bottom plot
    axes[4].grid(True, linestyle='--', alpha=0.6)

    # Automatically adjust subplot params for a tight layout.
    plt.tight_layout(rect=[0, 0.03, 1, 0.96])  # Adjust rect to make space for suptitle

    # Display the plots
    plt.show()


if __name__ == '__main__':
    plot_model_timeseries()